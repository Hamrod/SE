Createurs du projet :
BEUREL Luca et
BARBOT Malo

Crée sur une base donnée par Antonio Mucherino

-----------------------------------------------------------------

L'algorithme se base sur le BeeColonyOptimization (BCO) détaillé dans le PDF joint au projet.
Le but de cet algorithme est résoudre des problemes d'optimisation avec un systeme complexe basé sur des individus simples.

Il y a 2 classes principales pour cet algorithme : IterativeBCO qui exécute le programme en séquenciel et ThreadBCO qui crée
des regroupements d'abeilles en threads pour gagner des performances.


La version séquentielle fait explorer les abeilles une par une avec des temps de calcul correct.
Au contraire dans l'implémentation avec Threads, le principe est de regrouper les abeilles par thread pour qu'elles puissent explorer en paralelle.

L'idée de base du multi-Threading avec un thread par abeille exploratrice et toutes les autres abeilles la suivant dans ce meme thread n'a au final pas été retenue.
Il y aurait beaucoup trop de threads dans un premier temps et ne serai pas très efficace sur le long terme.


ALOGRITHME EN DÉTAIL :

NC => Nombre de mouvements construtifs que peut faire une abeille

1 - Toutes les abeilles ont une solution nulle
2 - Pour chaque abeille :
        a - Mettre k = 1
        b - Evaluer toutes les possibilités proches
        c - En choisir une
        d - k = k+1, Si k <= NC retourner a l'étape b
3 - Toutes les abeilles rentrent a la ruche
4 - Tri des abeilles en fonction de la solution partielle qu'elles ont
5 - Chaque abeille décide de continuer son exploration ou de suivre une abeille avec un meilleur résultat
6 - Chaque suiveuse décide quelle exploratrice elle va suivre
7 - Si la condition d'arret n'est pas validée retourner a l'étape 2 ( ici la condition est : le temps ou l'objectif a 0)
8 - Afficher le meilleur résultat


PERFORMANCES :

Nous avons principalement cherché à comparer les performances temporelles entre les deux versions.

La version avec threads est en moyenne 35% plus efficace.

Parfois, du fait que la méthode de recherche des abeilles soit entierement basé sur du hasard,
il a des temps d'exceution visiblement plus long. Cet effet a été observé sur les deux versions

Nous avons fait une moyenne sur 10 exécutions avec les parametres suivants

int maxTime = 120000 // N'a jamais été atteint
int BEESNUMBER = 100
int NC = 10

Sur les problèmes suivants :

BitCounter avec n = 1000
Fermat avec exp = 2 et ndigits = 10;

Et nous obtenons :

Temps d'exec en séquentiel BitCounter: 2914 ms
Temps d'exec avec Threads BitCounter: 1725 ms
Temps d'exec en séquentiel Fermat : 564 ms
Temps d'exec avec Threads Fermat : 407 ms
